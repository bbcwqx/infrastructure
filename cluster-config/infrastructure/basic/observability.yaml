apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: opentelemetry
  namespace: observability
spec:
  interval: 5m
  url: https://open-telemetry.github.io/opentelemetry-helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: otel-agent
  namespace: observability
spec:
  interval: 10m
  timeout: 5m
  chart:
    spec:
      chart: opentelemetry-collector
      version: "0.134.0"
      sourceRef:
        kind: HelmRepository
        name: opentelemetry
      interval: 5m
  releaseName: otel-agent
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    mode: daemonset

    image:
      repository: otel/opentelemetry-collector-k8s

    presets:
      kubernetesAttributes:
        enabled: true
      kubeletMetrics:
        enabled: true
      logsCollection:
        enabled: true

    config:
      exporters:
        otlp:
          endpoint: "otel-collector-opentelemetry-collector:4317"
          tls:
            insecure: true

      service:
        pipelines:
          traces:
            processors: [memory_limiter, batch]
            exporters: [otlp]
          metrics:
            processors: [memory_limiter, batch]
            exporters: [otlp]
          logs:
            processors: [k8sattributes, memory_limiter, batch]
            exporters: [otlp]
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: otel-collector
  namespace: observability
spec:
  interval: 10m
  timeout: 5m
  chart:
    spec:
      chart: opentelemetry-collector
      version: "0.134.0"
      sourceRef:
        kind: HelmRepository
        name: opentelemetry
      interval: 5m
  releaseName: otel-collector
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    mode: deployment

    image:
      repository: otel/opentelemetry-collector-k8s

    presets:
      clusterMetrics:
        enabled: true
      kubernetesEvents:
        enabled: true

    config:
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: "0.0.0.0:4317"
            http:
              endpoint: "0.0.0.0:4318"

        prometheus:
          config:
            scrape_configs:
              # collector
              - job_name: "opentelemetry-collector"
                scrape_interval: 10s
                static_configs:
                  - targets:
                      - ${env:MY_POD_IP}:8888
              # pods
              - job_name: "kubernetes-pods"
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels:
                      [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true
                  - source_labels:
                      [
                        __address__,
                        __meta_kubernetes_pod_annotation_prometheus_io_port,
                      ]
                    action: replace
                    regex: ([^:]+)(?::\d+)?;(\d+)
                    replacement: $1:$2
                    target_label: __address__
              # endpoints
              - job_name: "kubernetes-endpoints"
                scrape_interval: 30s
                kubernetes_sd_configs:
                  - role: endpoints
                relabel_configs:
                  - source_labels:
                      [
                        __meta_kubernetes_service_annotation_prometheus_io_scrape,
                      ]
                    action: keep
                    regex: true
                  - source_labels:
                      [
                        __address__,
                        __meta_kubernetes_service_annotation_prometheus_io_port,
                      ]
                    action: replace
                    target_label: __address__
                    regex: (.+)(?::\d+);(\d+)
                    replacement: $1:$2

      processors:
        resource/clusterName:
          attributes:
            - action: insert
              key: k8s.cluster.name
              value: "cluster"

      exporters:
        otlphttp:
          endpoint: "https://otlp-gateway-prod-us-east-2.grafana.net/otlp"
          headers:
            authorization: ${env:OTEL_AUTH_HEADER}

      service:
        pipelines:
          traces:
            processors: [resource/clusterName, memory_limiter, batch]
            exporters: [otlphttp]
          metrics:
            processors: [resource/clusterName, memory_limiter, batch]
            exporters: [otlphttp]
          logs:
            processors: [resource/clusterName, memory_limiter, batch]
            exporters: [otlphttp]

    extraEnvs:
      - name: OTEL_AUTH_HEADER
        valueFrom:
          secretKeyRef:
            name: otel-collector
            key: OTEL_AUTH_HEADER
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-endpoints
rules:
  - apiGroups: [""]
    resources: ["endpoints", "services", "pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-endpoints
subjects:
  - kind: ServiceAccount
    name: otel-collector-opentelemetry-collector
    namespace: observability
roleRef:
  kind: ClusterRole
  name: otel-collector-endpoints
  apiGroup: rbac.authorization.k8s.io
